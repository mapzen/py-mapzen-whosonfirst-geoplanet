#!/usr/bin/env python

import sys
import os.path
import logging
import pprint

import mapzen.whosonfirst.geoplanet
import mapzen.whosonfirst.utils
import mapzen.whosonfirst.export

logging.basicConfig(level=logging.DEBUG)

if __name__ == '__main__':

    import optparse

    opt_parser = optparse.OptionParser()

    opt_parser.add_option('-s', '--source', dest='source', action='store', default='None', help='')
    opt_parser.add_option('-i', '--id', dest='id', action='store', default='None', help='')
    opt_parser.add_option('-d', '--db', dest='db', action='store', default='None', help='')

    opt_parser.add_option('-v', '--verbose', dest='verbose', action='store_true', default=False, help='Be chatty (default is false)')

    options, args = opt_parser.parse_args()

    if options.verbose:	
        logging.basicConfig(level=logging.DEBUG)
    else:
        logging.basicConfig(level=logging.INFO)

    db = os.path.abspath(options.db)
    gp = mapzen.whosonfirst.geoplanet.names(db)

    source = os.path.abspath(options.source)
    exporter = mapzen.whosonfirst.export.flatfile(source)

    if options.id:

        feature = mapzen.whosonfirst.utils.load(source, options.id)
        gp.append_names(feature)
        exporter.export_feature(feature)

    else:

        crawl = mapzen.whosonfirst.utils.crawl(source, inflate=True)

        for feature in crawl:
            
            gp.append_names(feature)
            exporter.export_feature(feature)
            
    sys.exit()
